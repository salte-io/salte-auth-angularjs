/**
 * salte-auth-angular JavaScript Library v1.0.14
 *
 * @license MIT (https://github.com/salte-io/salte-auth/blob/master/LICENSE)
 *
 * Made with â™¥ by Dave Woodward <dave@salte.io>, Ceci <nick@salte.io
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("angular"), require("salte-auth"));
	else if(typeof define === 'function' && define.amd)
		define("salte-auth-angular", ["angular", "salte-auth"], factory);
	else if(typeof exports === 'object')
		exports["salte-auth-angular"] = factory(require("angular"), require("salte-auth"));
	else
		root["salte-auth-angular"] = factory(root["angular"], root["salte-auth"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./protected-resource-interceptor.factory.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = ProtectedResourceInterceptor;\n/* @ngInject */\nfunction ProtectedResourceInterceptor(salteAuthService, $q, $rootScope) {\n  return {\n    request: function request(config) {\n      if (config) {\n        var _ret = function () {\n          config.headers = config.headers || {};\n          var resource = salteAuthService.getResourceForEndpoint(config.url);\n          salteAuthService.verbose('Url: ' + config.url + ' maps to resource: ' + resource);\n\n          if (resource === null) {\n            return {\n              v: config\n            };\n          }\n\n          var tokenStored = salteAuthService.getCachedToken(resource);\n          if (tokenStored) {\n            salteAuthService.info('Token is available for this url ' + config.url);\n            // check endpoint mapping if provided\n            config.headers.Authorization = 'Bearer ' + tokenStored;\n            return {\n              v: config\n            };\n          }\n\n          // Cancel request if login is starting\n          var delayedRequest = void 0;\n          if (salteAuthService.loginInProgress()) {\n            if (salteAuthService.config.popUp) {\n              salteAuthService.info('Url: ' + config.url + ' will be loaded after login is successful');\n              delayedRequest = $q.defer();\n              $rootScope.$on('salte-auth:loginSuccess', function (event, token) {\n                if (token) {\n                  salteAuthService.info('Login completed, sending request for ' + config.url);\n                  config.headers.Authorization = 'Bearer ' + tokenStored;\n                  delayedRequest.resolve(config);\n                }\n              });\n              return {\n                v: delayedRequest.promise\n              };\n            }\n\n            salteAuthService.info('login is in progress.');\n            config.data = 'login in progress, cancelling the request for ' + config.url;\n            return {\n              v: $q.reject(config)\n            };\n          }\n\n          // delayed request to return after iframe completes\n          delayedRequest = $q.defer();\n          salteAuthService.acquireToken(resource).then(function (token) {\n            salteAuthService.verbose('Token is available');\n            config.headers.Authorization = 'Bearer ' + token;\n            delayedRequest.resolve(config);\n          }, function (err) {\n            config.data = err;\n            delayedRequest.reject(config);\n          });\n\n          return {\n            v: delayedRequest.promise\n          };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      }\n    },\n    responseError: function responseError(rejection) {\n      salteAuthService.info('Getting error in the response.');\n      if (rejection) {\n        if (rejection.status === 401) {\n          var resource = salteAuthService.getResourceForEndpoint(rejection.config.url);\n          salteAuthService.clearCacheForResource(resource);\n          $rootScope.$broadcast('salte-auth:notAuthorized', rejection, resource);\n        } else {\n          $rootScope.$broadcast('salte-auth:errorResponse', rejection);\n        }\n        return $q.reject(rejection);\n      }\n    }\n  };\n}\n\nProtectedResourceInterceptor.$inject = ['salteAuthService', '$q', '$rootScope'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvcHJvdGVjdGVkLXJlc291cmNlLWludGVyY2VwdG9yLmZhY3RvcnkuanM/ZjU3OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAbmdJbmplY3QgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFByb3RlY3RlZFJlc291cmNlSW50ZXJjZXB0b3Ioc2FsdGVBdXRoU2VydmljZSwgJHEsICRyb290U2NvcGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1ZXN0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcbiAgICAgICAgbGV0IHJlc291cmNlID0gc2FsdGVBdXRoU2VydmljZS5nZXRSZXNvdXJjZUZvckVuZHBvaW50KGNvbmZpZy51cmwpO1xuICAgICAgICBzYWx0ZUF1dGhTZXJ2aWNlLnZlcmJvc2UoJ1VybDogJyArIGNvbmZpZy51cmwgKyAnIG1hcHMgdG8gcmVzb3VyY2U6ICcgKyByZXNvdXJjZSk7XG5cbiAgICAgICAgaWYgKHJlc291cmNlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0b2tlblN0b3JlZCA9IHNhbHRlQXV0aFNlcnZpY2UuZ2V0Q2FjaGVkVG9rZW4ocmVzb3VyY2UpO1xuICAgICAgICBpZiAodG9rZW5TdG9yZWQpIHtcbiAgICAgICAgICBzYWx0ZUF1dGhTZXJ2aWNlLmluZm8oJ1Rva2VuIGlzIGF2YWlsYWJsZSBmb3IgdGhpcyB1cmwgJyArIGNvbmZpZy51cmwpO1xuICAgICAgICAgIC8vIGNoZWNrIGVuZHBvaW50IG1hcHBpbmcgaWYgcHJvdmlkZWRcbiAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgdG9rZW5TdG9yZWQ7XG4gICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbmNlbCByZXF1ZXN0IGlmIGxvZ2luIGlzIHN0YXJ0aW5nXG4gICAgICAgIGxldCBkZWxheWVkUmVxdWVzdDtcbiAgICAgICAgaWYgKHNhbHRlQXV0aFNlcnZpY2UubG9naW5JblByb2dyZXNzKCkpIHtcbiAgICAgICAgICBpZiAoc2FsdGVBdXRoU2VydmljZS5jb25maWcucG9wVXApIHtcbiAgICAgICAgICAgIHNhbHRlQXV0aFNlcnZpY2UuaW5mbygnVXJsOiAnICsgY29uZmlnLnVybCArICcgd2lsbCBiZSBsb2FkZWQgYWZ0ZXIgbG9naW4gaXMgc3VjY2Vzc2Z1bCcpO1xuICAgICAgICAgICAgZGVsYXllZFJlcXVlc3QgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ3NhbHRlLWF1dGg6bG9naW5TdWNjZXNzJywgZnVuY3Rpb24oZXZlbnQsIHRva2VuKSB7XG4gICAgICAgICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgICAgIHNhbHRlQXV0aFNlcnZpY2UuaW5mbygnTG9naW4gY29tcGxldGVkLCBzZW5kaW5nIHJlcXVlc3QgZm9yICcgKyBjb25maWcudXJsKTtcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgdG9rZW5TdG9yZWQ7XG4gICAgICAgICAgICAgICAgZGVsYXllZFJlcXVlc3QucmVzb2x2ZShjb25maWcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWxheWVkUmVxdWVzdC5wcm9taXNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNhbHRlQXV0aFNlcnZpY2UuaW5mbygnbG9naW4gaXMgaW4gcHJvZ3Jlc3MuJyk7XG4gICAgICAgICAgY29uZmlnLmRhdGEgPSAnbG9naW4gaW4gcHJvZ3Jlc3MsIGNhbmNlbGxpbmcgdGhlIHJlcXVlc3QgZm9yICcgKyBjb25maWcudXJsO1xuICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlbGF5ZWQgcmVxdWVzdCB0byByZXR1cm4gYWZ0ZXIgaWZyYW1lIGNvbXBsZXRlc1xuICAgICAgICBkZWxheWVkUmVxdWVzdCA9ICRxLmRlZmVyKCk7XG4gICAgICAgIHNhbHRlQXV0aFNlcnZpY2UuYWNxdWlyZVRva2VuKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgICAgc2FsdGVBdXRoU2VydmljZS52ZXJib3NlKCdUb2tlbiBpcyBhdmFpbGFibGUnKTtcbiAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgdG9rZW47XG4gICAgICAgICAgZGVsYXllZFJlcXVlc3QucmVzb2x2ZShjb25maWcpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25maWcuZGF0YSA9IGVycjtcbiAgICAgICAgICBkZWxheWVkUmVxdWVzdC5yZWplY3QoY29uZmlnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGRlbGF5ZWRSZXF1ZXN0LnByb21pc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNwb25zZUVycm9yOiBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgIHNhbHRlQXV0aFNlcnZpY2UuaW5mbygnR2V0dGluZyBlcnJvciBpbiB0aGUgcmVzcG9uc2UuJyk7XG4gICAgICBpZiAocmVqZWN0aW9uKSB7XG4gICAgICAgIGlmIChyZWplY3Rpb24uc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICBsZXQgcmVzb3VyY2UgPSBzYWx0ZUF1dGhTZXJ2aWNlLmdldFJlc291cmNlRm9yRW5kcG9pbnQocmVqZWN0aW9uLmNvbmZpZy51cmwpO1xuICAgICAgICAgIHNhbHRlQXV0aFNlcnZpY2UuY2xlYXJDYWNoZUZvclJlc291cmNlKHJlc291cmNlKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3NhbHRlLWF1dGg6bm90QXV0aG9yaXplZCcsIHJlamVjdGlvbiwgcmVzb3VyY2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnc2FsdGUtYXV0aDplcnJvclJlc3BvbnNlJywgcmVqZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5Qcm90ZWN0ZWRSZXNvdXJjZUludGVyY2VwdG9yLiRpbmplY3QgPSBbJ3NhbHRlQXV0aFNlcnZpY2UnLCAnJHEnLCAnJHJvb3RTY29wZSddO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9wcm90ZWN0ZWQtcmVzb3VyY2UtaW50ZXJjZXB0b3IuZmFjdG9yeS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFqREE7QUFDQTtBQURBO0FBa0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWxFQTtBQW9FQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 1 */
/* unknown exports provided */
/* all exports used */
/*!********************************!*\
  !*** ./salte-auth.provider.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var salteAuth = null;\n  var _oauthData = {\n    isAuthenticated: false,\n    userName: '',\n    loginError: '',\n    profile: ''\n  };\n\n  var updateDataFromCache = function updateDataFromCache(resource) {\n    // only cache lookup here to not interrupt with events\n    var token = salteAuth.getCachedToken(resource);\n    _oauthData.isAuthenticated = token !== null && token.length > 0;\n    var user = salteAuth.getCachedUser() || {\n      userName: ''\n    };\n    _oauthData.userName = user.userName;\n    _oauthData.profile = user.profile;\n    _oauthData.loginError = salteAuth.getLoginError();\n  };\n\n  this.init = function (configOptions, httpProvider) {\n    if (configOptions) {\n      // redirect and logout_redirect are set to current location by default\n      var existingHash = window.location.hash;\n      var pathDefault = window.location.href;\n      if (existingHash) {\n        pathDefault = pathDefault.replace(existingHash, '');\n      }\n      configOptions.redirectUri = configOptions.redirectUri || pathDefault;\n      configOptions.postLogoutRedirectUri = configOptions.postLogoutRedirectUri || pathDefault;\n      configOptions.isAngular = true;\n\n      if (httpProvider && httpProvider.interceptors) {\n        httpProvider.interceptors.push('ProtectedResourceInterceptor');\n      }\n\n      // create instance with given config\n      salteAuth = new _salteAuth2.default(configOptions);\n    } else {\n      throw new Error('You must set configOptions, when calling init');\n    }\n\n    // loginResource is used to set authenticated status\n    updateDataFromCache(salteAuth.config.loginResource);\n  };\n\n  /* @ngInject */\n  this.$get = function SalteAuthService($rootScope, $window, $q, $location, $timeout, $injector) {\n    var locationChangeHandler = function locationChangeHandler(event, newUrl, oldUrl) {\n      salteAuth.verbose('Location change event from ' + oldUrl + ' to ' + newUrl);\n      var hash = $window.location.hash;\n      var search = $window.location.search;\n\n      if (salteAuth.isCallback(hash, search)) {\n        // callback can come from login or iframe request\n        salteAuth.verbose('Processing Callback, Hash: ' + hash + '; Search String: ' + search);\n        var requestInfo = salteAuth.getRequestInfo(hash, search);\n        salteAuth.saveTokenFromHash(requestInfo);\n\n        // Return to callback if it is sent from iframe\n        if (requestInfo.stateMatch) {\n          if (requestInfo.requestType === salteAuth.REQUEST_TYPE.RENEW_TOKEN) {\n            var callback = $window.parent.AuthenticationContext.callBackMappedToRenewStates[requestInfo.stateResponse];\n            // since this is a token renewal request in iFrame, we don't need to proceed with the location change.\n            event.preventDefault();\n\n            // Call within the same context without full page redirect keeps the callback\n            if (callback && typeof callback === 'function') {\n              // id_token or access_token can be renewed\n              if (requestInfo.parameters.access_token) {\n                callback(salteAuth._getItem(salteAuth.CONSTANTS.STORAGE.ERROR_DESCRIPTION), requestInfo.parameters.access_token);\n                return;\n              } else if (requestInfo.parameters.id_token) {\n                callback(salteAuth._getItem(salteAuth.CONSTANTS.STORAGE.ERROR_DESCRIPTION), requestInfo.parameters.id_token);\n                return;\n              } else if (requestInfo.parameters.error) {\n                callback(salteAuth._getItem(salteAuth.CONSTANTS.STORAGE.ERROR_DESCRIPTION), null);\n                return;\n              }\n            }\n          } else if (requestInfo.requestType === salteAuth.REQUEST_TYPE.LOGIN) {\n            // normal full login redirect happened on the page\n            updateDataFromCache(salteAuth.config.loginResource);\n            if (_oauthData.userName) {\n              $timeout(function () {\n                // id_token is added as token for the app\n                updateDataFromCache(salteAuth.config.loginResource);\n                $rootScope.userInfo = _oauthData;\n              }, 1);\n\n              $rootScope.$broadcast('salte-auth:loginSuccess', salteAuth._getItem(salteAuth.CONSTANTS.STORAGE.IDTOKEN));\n            } else {\n              $rootScope.$broadcast('salte-auth:loginFailure', salteAuth._getItem(salteAuth.CONSTANTS.STORAGE.ERROR_DESCRIPTION));\n            }\n\n            if (salteAuth.callback && typeof salteAuth.callback === 'function') {\n              salteAuth.callback(salteAuth._getItem(salteAuth.CONSTANTS.STORAGE.ERROR_DESCRIPTION), salteAuth._getItem(salteAuth.CONSTANTS.STORAGE.IDTOKEN));\n            }\n\n            // redirect to login start page\n            if (!salteAuth.popUp) {\n              var loginStartPage = salteAuth._getItem(salteAuth.CONSTANTS.STORAGE.LOGIN_REQUEST);\n              if (typeof loginStartPage !== 'undefined' && loginStartPage && loginStartPage.length !== 0) {\n                // prevent the current location change and redirect the user back to the login start page\n                salteAuth.verbose('Redirecting to start page: ' + loginStartPage);\n                if (!$location.$$html5 && loginStartPage.indexOf('#') > -1) {\n                  $location.url(loginStartPage.substring(loginStartPage.indexOf('#') + 1));\n                }\n                $window.location = loginStartPage;\n              }\n            } else {\n              event.preventDefault();\n            }\n          }\n        } else {\n          // state did not match, broadcast an error\n          $rootScope.$broadcast('salte-auth:stateMismatch', salteAuth._getItem(salteAuth.CONSTANTS.STORAGE.ERROR_DESCRIPTION));\n        }\n      } else {\n        // No callback. App resumes after closing or moving to new page.\n        // Check token and username\n        updateDataFromCache(salteAuth.config.loginResource);\n        if (!_oauthData.isAuthenticated && _oauthData.userName && !salteAuth._renewActive) {\n          // id_token is expired or not present\n          salteAuth._renewActive = true;\n          salteAuth.acquireToken(salteAuth.config.loginResource, function (error, tokenOut) {\n            salteAuth._renewActive = false;\n            if (error) {\n              $rootScope.$broadcast('salte-auth:loginFailure', 'auto renew failure');\n            } else if (tokenOut) {\n              _oauthData.isAuthenticated = true;\n            }\n          });\n        }\n      }\n\n      $timeout(function () {\n        updateDataFromCache(salteAuth.config.loginResource);\n        $rootScope.userInfo = _oauthData;\n      }, 1);\n    };\n\n    var loginHandler = function loginHandler() {\n      salteAuth.info('Login event for:' + $location.$$url);\n      if (salteAuth.config && salteAuth.config.localLoginUrl) {\n        $location.path(salteAuth.config.localLoginUrl);\n      } else {\n        // directly start login flow\n        salteAuth.info('Start login at:' + window.location.href);\n        $rootScope.$broadcast('salte-auth:loginRedirect');\n        salteAuth.login($location.absUrl());\n      }\n    };\n\n    function isADLoginRequired(route, global) {\n      return global.requireAuthentication ? route.requireAuthentication !== false : Boolean(route.requireAuthentication);\n    }\n\n    function isAnonymousEndpoint(url) {\n      if (salteAuth.config && salteAuth.config.anonymousEndpoints) {\n        for (var i = 0; i < salteAuth.config.anonymousEndpoints.length; i++) {\n          if (url.indexOf(salteAuth.config.anonymousEndpoints[i]) > -1) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    function getStates(toState) {\n      var state = null;\n      var states = [];\n      if (toState.hasOwnProperty('parent')) {\n        state = toState;\n        while (state) {\n          states.unshift(state);\n          state = $injector.get('$state').get(state.parent);\n        }\n      } else {\n        var stateNames = toState.name.split('.');\n        for (var i = 0, stateName = stateNames[0]; i < stateNames.length; i++) {\n          state = $injector.get('$state').get(stateName);\n          if (state) {\n            states.push(state);\n          }\n          stateName += '.' + stateNames[i + 1];\n        }\n      }\n      return states;\n    }\n\n    var routeChangeHandler = function routeChangeHandler(e, nextRoute) {\n      if (nextRoute && nextRoute.$$route) {\n        if (isADLoginRequired(nextRoute.$$route, salteAuth.config)) {\n          if (!_oauthData.isAuthenticated) {\n            if (!salteAuth._renewActive && !salteAuth.loginInProgress()) {\n              salteAuth.info('Route change event for:' + $location.$$url);\n              loginHandler();\n            }\n          }\n        } else {\n          var nextRouteUrl = void 0;\n          if (typeof nextRoute.$$route.templateUrl === 'function') {\n            nextRouteUrl = nextRoute.$$route.templateUrl(nextRoute.params);\n          } else {\n            nextRouteUrl = nextRoute.$$route.templateUrl;\n          }\n\n          if (nextRouteUrl && !isAnonymousEndpoint(nextRouteUrl)) {\n            salteAuth.config.anonymousEndpoints.push(nextRouteUrl);\n          }\n        }\n      }\n    };\n\n    var stateChangeHandler = function stateChangeHandler(e, toState, toParams, fromState, fromParams) {\n      // jshint ignore:line\n      if (toState) {\n        var states = getStates(toState);\n        var state = null;\n        for (var i = 0; i < states.length; i++) {\n          state = states[i];\n          if (isADLoginRequired(state, salteAuth.config)) {\n            if (!_oauthData.isAuthenticated) {\n              if (!salteAuth._renewActive && !salteAuth.loginInProgress()) {\n                salteAuth.info('State change event for:' + $location.$$url);\n                loginHandler();\n              }\n            }\n          } else if (state.templateUrl) {\n            var nextStateUrl = void 0;\n            if (typeof state.templateUrl === 'function') {\n              nextStateUrl = state.templateUrl(toParams);\n            } else {\n              nextStateUrl = state.templateUrl;\n            }\n            if (nextStateUrl && !isAnonymousEndpoint(nextStateUrl)) {\n              salteAuth.config.anonymousEndpoints.push(nextStateUrl);\n            }\n          }\n        }\n      }\n    };\n\n    var stateChangeErrorHandler = function stateChangeErrorHandler(event, toState, toParams, fromState, fromParams, error) {\n      salteAuth.verbose('State change error occured. Error: ' + error);\n\n      if (error && error.data) {\n        salteAuth.info('Setting defaultPrevented to true if state change error occured because the request was rejected. Error: ' + error.data);\n        event.preventDefault();\n      }\n    };\n\n    // Route change event tracking to receive fragment and also auto renew tokens\n    $rootScope.$on('$routeChangeStart', routeChangeHandler);\n\n    $rootScope.$on('$stateChangeStart', stateChangeHandler);\n\n    $rootScope.$on('$locationChangeStart', locationChangeHandler);\n\n    $rootScope.$on('$stateChangeError', stateChangeErrorHandler);\n\n    updateDataFromCache(salteAuth.config.loginResource);\n    $rootScope.userInfo = _oauthData;\n\n    return {\n      // public methods will be here that are accessible from Controller\n      config: salteAuth.config,\n      login: function login() {\n        loginHandler();\n      },\n      loginInProgress: function loginInProgress() {\n        return salteAuth.loginInProgress();\n      },\n      logOut: function logOut() {\n        salteAuth.logOut();\n        // call signout related method\n      },\n      getCachedToken: function getCachedToken(resource) {\n        return salteAuth.getCachedToken(resource);\n      },\n      userInfo: _oauthData,\n      acquireToken: function acquireToken(resource) {\n        // automated token request call\n        var deferred = $q.defer();\n        salteAuth._renewActive = true;\n        salteAuth.acquireToken(resource, function (error, tokenOut) {\n          salteAuth._renewActive = false;\n          if (error) {\n            salteAuth.error('Error when acquiring token for resource: ' + resource, error);\n            deferred.reject(error);\n          } else {\n            deferred.resolve(tokenOut);\n          }\n        });\n\n        return deferred.promise;\n      },\n      getUser: function getUser() {\n        var deferred = $q.defer();\n        salteAuth.getUser(function (error, user) {\n          if (error) {\n            salteAuth.error('Error when getting user', error);\n            deferred.reject(error);\n          } else {\n            deferred.resolve(user);\n          }\n        });\n\n        return deferred.promise;\n      },\n      getResourceForEndpoint: function getResourceForEndpoint(endpoint) {\n        return salteAuth.getResourceForEndpoint(endpoint);\n      },\n      clearCache: function clearCache() {\n        salteAuth.clearCache();\n      },\n      clearCacheForResource: function clearCacheForResource(resource) {\n        salteAuth.clearCacheForResource(resource);\n      },\n      info: function info(message) {\n        salteAuth.info(message);\n      },\n      verbose: function verbose(message) {\n        salteAuth.verbose(message);\n      },\n      salteAuth: salteAuth\n    };\n  };\n  this.$get.$inject = ['$rootScope', '$window', '$q', '$location', '$timeout', '$injector'];\n};\n\nvar _salteAuth = __webpack_require__(/*! salte-auth */ 3);\n\nvar _salteAuth2 = _interopRequireDefault(_salteAuth);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvc2FsdGUtYXV0aC5wcm92aWRlci5qcz81NjA3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTYWx0ZUF1dGggZnJvbSAnc2FsdGUtYXV0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBsZXQgc2FsdGVBdXRoID0gbnVsbDtcbiAgbGV0IF9vYXV0aERhdGEgPSB7XG4gICAgaXNBdXRoZW50aWNhdGVkOiBmYWxzZSxcbiAgICB1c2VyTmFtZTogJycsXG4gICAgbG9naW5FcnJvcjogJycsXG4gICAgcHJvZmlsZTogJydcbiAgfTtcblxuICBsZXQgdXBkYXRlRGF0YUZyb21DYWNoZSA9IGZ1bmN0aW9uKHJlc291cmNlKSB7XG4gICAgLy8gb25seSBjYWNoZSBsb29rdXAgaGVyZSB0byBub3QgaW50ZXJydXB0IHdpdGggZXZlbnRzXG4gICAgbGV0IHRva2VuID0gc2FsdGVBdXRoLmdldENhY2hlZFRva2VuKHJlc291cmNlKTtcbiAgICBfb2F1dGhEYXRhLmlzQXV0aGVudGljYXRlZCA9IHRva2VuICE9PSBudWxsICYmIHRva2VuLmxlbmd0aCA+IDA7XG4gICAgbGV0IHVzZXIgPSBzYWx0ZUF1dGguZ2V0Q2FjaGVkVXNlcigpIHx8IHtcbiAgICAgIHVzZXJOYW1lOiAnJ1xuICAgIH07XG4gICAgX29hdXRoRGF0YS51c2VyTmFtZSA9IHVzZXIudXNlck5hbWU7XG4gICAgX29hdXRoRGF0YS5wcm9maWxlID0gdXNlci5wcm9maWxlO1xuICAgIF9vYXV0aERhdGEubG9naW5FcnJvciA9IHNhbHRlQXV0aC5nZXRMb2dpbkVycm9yKCk7XG4gIH07XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oY29uZmlnT3B0aW9ucywgaHR0cFByb3ZpZGVyKSB7XG4gICAgaWYgKGNvbmZpZ09wdGlvbnMpIHtcbiAgICAgIC8vIHJlZGlyZWN0IGFuZCBsb2dvdXRfcmVkaXJlY3QgYXJlIHNldCB0byBjdXJyZW50IGxvY2F0aW9uIGJ5IGRlZmF1bHRcbiAgICAgIGxldCBleGlzdGluZ0hhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICAgIGxldCBwYXRoRGVmYXVsdCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgaWYgKGV4aXN0aW5nSGFzaCkge1xuICAgICAgICBwYXRoRGVmYXVsdCA9IHBhdGhEZWZhdWx0LnJlcGxhY2UoZXhpc3RpbmdIYXNoLCAnJyk7XG4gICAgICB9XG4gICAgICBjb25maWdPcHRpb25zLnJlZGlyZWN0VXJpID0gY29uZmlnT3B0aW9ucy5yZWRpcmVjdFVyaSB8fCBwYXRoRGVmYXVsdDtcbiAgICAgIGNvbmZpZ09wdGlvbnMucG9zdExvZ291dFJlZGlyZWN0VXJpID0gY29uZmlnT3B0aW9ucy5wb3N0TG9nb3V0UmVkaXJlY3RVcmkgfHwgcGF0aERlZmF1bHQ7XG4gICAgICBjb25maWdPcHRpb25zLmlzQW5ndWxhciA9IHRydWU7XG5cbiAgICAgIGlmIChodHRwUHJvdmlkZXIgJiYgaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycykge1xuICAgICAgICBodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ1Byb3RlY3RlZFJlc291cmNlSW50ZXJjZXB0b3InKTtcbiAgICAgIH1cblxuICAgICAgLy8gY3JlYXRlIGluc3RhbmNlIHdpdGggZ2l2ZW4gY29uZmlnXG4gICAgICBzYWx0ZUF1dGggPSBuZXcgU2FsdGVBdXRoKGNvbmZpZ09wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHNldCBjb25maWdPcHRpb25zLCB3aGVuIGNhbGxpbmcgaW5pdCcpO1xuICAgIH1cblxuICAgIC8vIGxvZ2luUmVzb3VyY2UgaXMgdXNlZCB0byBzZXQgYXV0aGVudGljYXRlZCBzdGF0dXNcbiAgICB1cGRhdGVEYXRhRnJvbUNhY2hlKHNhbHRlQXV0aC5jb25maWcubG9naW5SZXNvdXJjZSk7XG4gIH07XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uIFNhbHRlQXV0aFNlcnZpY2UoJHJvb3RTY29wZSwgJHdpbmRvdywgJHEsICRsb2NhdGlvbiwgJHRpbWVvdXQsICRpbmplY3Rvcikge1xuICAgIGxldCBsb2NhdGlvbkNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCwgbmV3VXJsLCBvbGRVcmwpIHtcbiAgICAgIHNhbHRlQXV0aC52ZXJib3NlKCdMb2NhdGlvbiBjaGFuZ2UgZXZlbnQgZnJvbSAnICsgb2xkVXJsICsgJyB0byAnICsgbmV3VXJsKTtcbiAgICAgIGxldCBoYXNoID0gJHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgbGV0IHNlYXJjaCA9ICR3aW5kb3cubG9jYXRpb24uc2VhcmNoO1xuXG4gICAgICBpZiAoc2FsdGVBdXRoLmlzQ2FsbGJhY2soaGFzaCwgc2VhcmNoKSkge1xuICAgICAgICAvLyBjYWxsYmFjayBjYW4gY29tZSBmcm9tIGxvZ2luIG9yIGlmcmFtZSByZXF1ZXN0XG4gICAgICAgIHNhbHRlQXV0aC52ZXJib3NlKCdQcm9jZXNzaW5nIENhbGxiYWNrLCBIYXNoOiAnICsgaGFzaCArICc7IFNlYXJjaCBTdHJpbmc6ICcgKyBzZWFyY2gpO1xuICAgICAgICBsZXQgcmVxdWVzdEluZm8gPSBzYWx0ZUF1dGguZ2V0UmVxdWVzdEluZm8oaGFzaCwgc2VhcmNoKTtcbiAgICAgICAgc2FsdGVBdXRoLnNhdmVUb2tlbkZyb21IYXNoKHJlcXVlc3RJbmZvKTtcblxuICAgICAgICAvLyBSZXR1cm4gdG8gY2FsbGJhY2sgaWYgaXQgaXMgc2VudCBmcm9tIGlmcmFtZVxuICAgICAgICBpZiAocmVxdWVzdEluZm8uc3RhdGVNYXRjaCkge1xuICAgICAgICAgIGlmIChyZXF1ZXN0SW5mby5yZXF1ZXN0VHlwZSA9PT0gc2FsdGVBdXRoLlJFUVVFU1RfVFlQRS5SRU5FV19UT0tFTikge1xuICAgICAgICAgICAgbGV0IGNhbGxiYWNrID0gJHdpbmRvdy5wYXJlbnQuQXV0aGVudGljYXRpb25Db250ZXh0LmNhbGxCYWNrTWFwcGVkVG9SZW5ld1N0YXRlc1tyZXF1ZXN0SW5mby5zdGF0ZVJlc3BvbnNlXTtcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoaXMgaXMgYSB0b2tlbiByZW5ld2FsIHJlcXVlc3QgaW4gaUZyYW1lLCB3ZSBkb24ndCBuZWVkIHRvIHByb2NlZWQgd2l0aCB0aGUgbG9jYXRpb24gY2hhbmdlLlxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy8gQ2FsbCB3aXRoaW4gdGhlIHNhbWUgY29udGV4dCB3aXRob3V0IGZ1bGwgcGFnZSByZWRpcmVjdCBrZWVwcyB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgLy8gaWRfdG9rZW4gb3IgYWNjZXNzX3Rva2VuIGNhbiBiZSByZW5ld2VkXG4gICAgICAgICAgICAgIGlmIChyZXF1ZXN0SW5mby5wYXJhbWV0ZXJzLmFjY2Vzc190b2tlbikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHNhbHRlQXV0aC5fZ2V0SXRlbShzYWx0ZUF1dGguQ09OU1RBTlRTLlNUT1JBR0UuRVJST1JfREVTQ1JJUFRJT04pLCByZXF1ZXN0SW5mby5wYXJhbWV0ZXJzLmFjY2Vzc190b2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3RJbmZvLnBhcmFtZXRlcnMuaWRfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhzYWx0ZUF1dGguX2dldEl0ZW0oc2FsdGVBdXRoLkNPTlNUQU5UUy5TVE9SQUdFLkVSUk9SX0RFU0NSSVBUSU9OKSwgcmVxdWVzdEluZm8ucGFyYW1ldGVycy5pZF90b2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3RJbmZvLnBhcmFtZXRlcnMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhzYWx0ZUF1dGguX2dldEl0ZW0oc2FsdGVBdXRoLkNPTlNUQU5UUy5TVE9SQUdFLkVSUk9SX0RFU0NSSVBUSU9OKSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0SW5mby5yZXF1ZXN0VHlwZSA9PT0gc2FsdGVBdXRoLlJFUVVFU1RfVFlQRS5MT0dJTikge1xuICAgICAgICAgICAgLy8gbm9ybWFsIGZ1bGwgbG9naW4gcmVkaXJlY3QgaGFwcGVuZWQgb24gdGhlIHBhZ2VcbiAgICAgICAgICAgIHVwZGF0ZURhdGFGcm9tQ2FjaGUoc2FsdGVBdXRoLmNvbmZpZy5sb2dpblJlc291cmNlKTtcbiAgICAgICAgICAgIGlmIChfb2F1dGhEYXRhLnVzZXJOYW1lKSB7XG4gICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIGlkX3Rva2VuIGlzIGFkZGVkIGFzIHRva2VuIGZvciB0aGUgYXBwXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YUZyb21DYWNoZShzYWx0ZUF1dGguY29uZmlnLmxvZ2luUmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlckluZm8gPSBfb2F1dGhEYXRhO1xuICAgICAgICAgICAgICB9LCAxKTtcblxuICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3NhbHRlLWF1dGg6bG9naW5TdWNjZXNzJywgc2FsdGVBdXRoLl9nZXRJdGVtKHNhbHRlQXV0aC5DT05TVEFOVFMuU1RPUkFHRS5JRFRPS0VOKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3NhbHRlLWF1dGg6bG9naW5GYWlsdXJlJywgc2FsdGVBdXRoLl9nZXRJdGVtKHNhbHRlQXV0aC5DT05TVEFOVFMuU1RPUkFHRS5FUlJPUl9ERVNDUklQVElPTikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2FsdGVBdXRoLmNhbGxiYWNrICYmIHR5cGVvZiBzYWx0ZUF1dGguY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgc2FsdGVBdXRoLmNhbGxiYWNrKHNhbHRlQXV0aC5fZ2V0SXRlbShzYWx0ZUF1dGguQ09OU1RBTlRTLlNUT1JBR0UuRVJST1JfREVTQ1JJUFRJT04pLCBzYWx0ZUF1dGguX2dldEl0ZW0oc2FsdGVBdXRoLkNPTlNUQU5UUy5TVE9SQUdFLklEVE9LRU4pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVkaXJlY3QgdG8gbG9naW4gc3RhcnQgcGFnZVxuICAgICAgICAgICAgaWYgKCFzYWx0ZUF1dGgucG9wVXApIHtcbiAgICAgICAgICAgICAgbGV0IGxvZ2luU3RhcnRQYWdlID0gc2FsdGVBdXRoLl9nZXRJdGVtKHNhbHRlQXV0aC5DT05TVEFOVFMuU1RPUkFHRS5MT0dJTl9SRVFVRVNUKTtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2dpblN0YXJ0UGFnZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9naW5TdGFydFBhZ2UgJiYgbG9naW5TdGFydFBhZ2UubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCB0aGUgY3VycmVudCBsb2NhdGlvbiBjaGFuZ2UgYW5kIHJlZGlyZWN0IHRoZSB1c2VyIGJhY2sgdG8gdGhlIGxvZ2luIHN0YXJ0IHBhZ2VcbiAgICAgICAgICAgICAgICBzYWx0ZUF1dGgudmVyYm9zZSgnUmVkaXJlY3RpbmcgdG8gc3RhcnQgcGFnZTogJyArIGxvZ2luU3RhcnRQYWdlKTtcbiAgICAgICAgICAgICAgICBpZiAoISRsb2NhdGlvbi4kJGh0bWw1ICYmIGxvZ2luU3RhcnRQYWdlLmluZGV4T2YoJyMnKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAkbG9jYXRpb24udXJsKGxvZ2luU3RhcnRQYWdlLnN1YnN0cmluZyhsb2dpblN0YXJ0UGFnZS5pbmRleE9mKCcjJykgKyAxKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24gPSBsb2dpblN0YXJ0UGFnZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gc3RhdGUgZGlkIG5vdCBtYXRjaCwgYnJvYWRjYXN0IGFuIGVycm9yXG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdzYWx0ZS1hdXRoOnN0YXRlTWlzbWF0Y2gnLCBzYWx0ZUF1dGguX2dldEl0ZW0oc2FsdGVBdXRoLkNPTlNUQU5UUy5TVE9SQUdFLkVSUk9SX0RFU0NSSVBUSU9OKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vIGNhbGxiYWNrLiBBcHAgcmVzdW1lcyBhZnRlciBjbG9zaW5nIG9yIG1vdmluZyB0byBuZXcgcGFnZS5cbiAgICAgICAgLy8gQ2hlY2sgdG9rZW4gYW5kIHVzZXJuYW1lXG4gICAgICAgIHVwZGF0ZURhdGFGcm9tQ2FjaGUoc2FsdGVBdXRoLmNvbmZpZy5sb2dpblJlc291cmNlKTtcbiAgICAgICAgaWYgKCFfb2F1dGhEYXRhLmlzQXV0aGVudGljYXRlZCAmJiBfb2F1dGhEYXRhLnVzZXJOYW1lICYmICFzYWx0ZUF1dGguX3JlbmV3QWN0aXZlKSB7XG4gICAgICAgICAgLy8gaWRfdG9rZW4gaXMgZXhwaXJlZCBvciBub3QgcHJlc2VudFxuICAgICAgICAgIHNhbHRlQXV0aC5fcmVuZXdBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIHNhbHRlQXV0aC5hY3F1aXJlVG9rZW4oc2FsdGVBdXRoLmNvbmZpZy5sb2dpblJlc291cmNlLCBmdW5jdGlvbihlcnJvciwgdG9rZW5PdXQpIHtcbiAgICAgICAgICAgIHNhbHRlQXV0aC5fcmVuZXdBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3NhbHRlLWF1dGg6bG9naW5GYWlsdXJlJywgJ2F1dG8gcmVuZXcgZmFpbHVyZScpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlbk91dCkge1xuICAgICAgICAgICAgICBfb2F1dGhEYXRhLmlzQXV0aGVudGljYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHVwZGF0ZURhdGFGcm9tQ2FjaGUoc2FsdGVBdXRoLmNvbmZpZy5sb2dpblJlc291cmNlKTtcbiAgICAgICAgJHJvb3RTY29wZS51c2VySW5mbyA9IF9vYXV0aERhdGE7XG4gICAgICB9LCAxKTtcbiAgICB9O1xuXG4gICAgbGV0IGxvZ2luSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2FsdGVBdXRoLmluZm8oJ0xvZ2luIGV2ZW50IGZvcjonICsgJGxvY2F0aW9uLiQkdXJsKTtcbiAgICAgIGlmIChzYWx0ZUF1dGguY29uZmlnICYmIHNhbHRlQXV0aC5jb25maWcubG9jYWxMb2dpblVybCkge1xuICAgICAgICAkbG9jYXRpb24ucGF0aChzYWx0ZUF1dGguY29uZmlnLmxvY2FsTG9naW5VcmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgc3RhcnQgbG9naW4gZmxvd1xuICAgICAgICBzYWx0ZUF1dGguaW5mbygnU3RhcnQgbG9naW4gYXQ6JyArIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdzYWx0ZS1hdXRoOmxvZ2luUmVkaXJlY3QnKTtcbiAgICAgICAgc2FsdGVBdXRoLmxvZ2luKCRsb2NhdGlvbi5hYnNVcmwoKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzQURMb2dpblJlcXVpcmVkKHJvdXRlLCBnbG9iYWwpIHtcbiAgICAgIHJldHVybiBnbG9iYWwucmVxdWlyZUF1dGhlbnRpY2F0aW9uID8gcm91dGUucmVxdWlyZUF1dGhlbnRpY2F0aW9uICE9PSBmYWxzZSA6IEJvb2xlYW4ocm91dGUucmVxdWlyZUF1dGhlbnRpY2F0aW9uKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0Fub255bW91c0VuZHBvaW50KHVybCkge1xuICAgICAgaWYgKHNhbHRlQXV0aC5jb25maWcgJiYgc2FsdGVBdXRoLmNvbmZpZy5hbm9ueW1vdXNFbmRwb2ludHMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYWx0ZUF1dGguY29uZmlnLmFub255bW91c0VuZHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh1cmwuaW5kZXhPZihzYWx0ZUF1dGguY29uZmlnLmFub255bW91c0VuZHBvaW50c1tpXSkgPiAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3RhdGVzKHRvU3RhdGUpIHtcbiAgICAgIGxldCBzdGF0ZSA9IG51bGw7XG4gICAgICBsZXQgc3RhdGVzID0gW107XG4gICAgICBpZiAodG9TdGF0ZS5oYXNPd25Qcm9wZXJ0eSgncGFyZW50JykpIHtcbiAgICAgICAgc3RhdGUgPSB0b1N0YXRlO1xuICAgICAgICB3aGlsZSAoc3RhdGUpIHtcbiAgICAgICAgICBzdGF0ZXMudW5zaGlmdChzdGF0ZSk7XG4gICAgICAgICAgc3RhdGUgPSAkaW5qZWN0b3IuZ2V0KCckc3RhdGUnKS5nZXQoc3RhdGUucGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHN0YXRlTmFtZXMgPSB0b1N0YXRlLm5hbWUuc3BsaXQoJy4nKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIHN0YXRlTmFtZSA9IHN0YXRlTmFtZXNbMF07IGkgPCBzdGF0ZU5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc3RhdGUgPSAkaW5qZWN0b3IuZ2V0KCckc3RhdGUnKS5nZXQoc3RhdGVOYW1lKTtcbiAgICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHN0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGVOYW1lICs9ICcuJyArIHN0YXRlTmFtZXNbaSArIDFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGVzO1xuICAgIH1cblxuICAgIGxldCByb3V0ZUNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbihlLCBuZXh0Um91dGUpIHtcbiAgICAgIGlmIChuZXh0Um91dGUgJiYgbmV4dFJvdXRlLiQkcm91dGUpIHtcbiAgICAgICAgaWYgKGlzQURMb2dpblJlcXVpcmVkKG5leHRSb3V0ZS4kJHJvdXRlLCBzYWx0ZUF1dGguY29uZmlnKSkge1xuICAgICAgICAgIGlmICghX29hdXRoRGF0YS5pc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICAgICAgICAgIGlmICghc2FsdGVBdXRoLl9yZW5ld0FjdGl2ZSAmJiAhc2FsdGVBdXRoLmxvZ2luSW5Qcm9ncmVzcygpKSB7XG4gICAgICAgICAgICAgIHNhbHRlQXV0aC5pbmZvKCdSb3V0ZSBjaGFuZ2UgZXZlbnQgZm9yOicgKyAkbG9jYXRpb24uJCR1cmwpO1xuICAgICAgICAgICAgICBsb2dpbkhhbmRsZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IG5leHRSb3V0ZVVybDtcbiAgICAgICAgICBpZiAodHlwZW9mIG5leHRSb3V0ZS4kJHJvdXRlLnRlbXBsYXRlVXJsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBuZXh0Um91dGVVcmwgPSBuZXh0Um91dGUuJCRyb3V0ZS50ZW1wbGF0ZVVybChuZXh0Um91dGUucGFyYW1zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dFJvdXRlVXJsID0gbmV4dFJvdXRlLiQkcm91dGUudGVtcGxhdGVVcmw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG5leHRSb3V0ZVVybCAmJiAhaXNBbm9ueW1vdXNFbmRwb2ludChuZXh0Um91dGVVcmwpKSB7XG4gICAgICAgICAgICBzYWx0ZUF1dGguY29uZmlnLmFub255bW91c0VuZHBvaW50cy5wdXNoKG5leHRSb3V0ZVVybCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCBzdGF0ZUNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbihlLCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKSB7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgaWYgKHRvU3RhdGUpIHtcbiAgICAgICAgbGV0IHN0YXRlcyA9IGdldFN0YXRlcyh0b1N0YXRlKTtcbiAgICAgICAgbGV0IHN0YXRlID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzdGF0ZSA9IHN0YXRlc1tpXTtcbiAgICAgICAgICBpZiAoaXNBRExvZ2luUmVxdWlyZWQoc3RhdGUsIHNhbHRlQXV0aC5jb25maWcpKSB7XG4gICAgICAgICAgICBpZiAoIV9vYXV0aERhdGEuaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgICAgICAgICAgIGlmICghc2FsdGVBdXRoLl9yZW5ld0FjdGl2ZSAmJiAhc2FsdGVBdXRoLmxvZ2luSW5Qcm9ncmVzcygpKSB7XG4gICAgICAgICAgICAgICAgc2FsdGVBdXRoLmluZm8oJ1N0YXRlIGNoYW5nZSBldmVudCBmb3I6JyArICRsb2NhdGlvbi4kJHVybCk7XG4gICAgICAgICAgICAgICAgbG9naW5IYW5kbGVyKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLnRlbXBsYXRlVXJsKSB7XG4gICAgICAgICAgICBsZXQgbmV4dFN0YXRlVXJsO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZS50ZW1wbGF0ZVVybCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBuZXh0U3RhdGVVcmwgPSBzdGF0ZS50ZW1wbGF0ZVVybCh0b1BhcmFtcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXh0U3RhdGVVcmwgPSBzdGF0ZS50ZW1wbGF0ZVVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0U3RhdGVVcmwgJiYgIWlzQW5vbnltb3VzRW5kcG9pbnQobmV4dFN0YXRlVXJsKSkge1xuICAgICAgICAgICAgICBzYWx0ZUF1dGguY29uZmlnLmFub255bW91c0VuZHBvaW50cy5wdXNoKG5leHRTdGF0ZVVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCBzdGF0ZUNoYW5nZUVycm9ySGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikge1xuICAgICAgc2FsdGVBdXRoLnZlcmJvc2UoJ1N0YXRlIGNoYW5nZSBlcnJvciBvY2N1cmVkLiBFcnJvcjogJyArIGVycm9yKTtcblxuICAgICAgaWYgKGVycm9yICYmIGVycm9yLmRhdGEpIHtcbiAgICAgICAgc2FsdGVBdXRoLmluZm8oJ1NldHRpbmcgZGVmYXVsdFByZXZlbnRlZCB0byB0cnVlIGlmIHN0YXRlIGNoYW5nZSBlcnJvciBvY2N1cmVkIGJlY2F1c2UgdGhlIHJlcXVlc3Qgd2FzIHJlamVjdGVkLiBFcnJvcjogJyArIGVycm9yLmRhdGEpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBSb3V0ZSBjaGFuZ2UgZXZlbnQgdHJhY2tpbmcgdG8gcmVjZWl2ZSBmcmFnbWVudCBhbmQgYWxzbyBhdXRvIHJlbmV3IHRva2Vuc1xuICAgICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsIHJvdXRlQ2hhbmdlSGFuZGxlcik7XG5cbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBzdGF0ZUNoYW5nZUhhbmRsZXIpO1xuXG4gICAgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbG9jYXRpb25DaGFuZ2VIYW5kbGVyKTtcblxuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIHN0YXRlQ2hhbmdlRXJyb3JIYW5kbGVyKTtcblxuICAgIHVwZGF0ZURhdGFGcm9tQ2FjaGUoc2FsdGVBdXRoLmNvbmZpZy5sb2dpblJlc291cmNlKTtcbiAgICAkcm9vdFNjb3BlLnVzZXJJbmZvID0gX29hdXRoRGF0YTtcblxuICAgIHJldHVybiB7XG4gICAgICAvLyBwdWJsaWMgbWV0aG9kcyB3aWxsIGJlIGhlcmUgdGhhdCBhcmUgYWNjZXNzaWJsZSBmcm9tIENvbnRyb2xsZXJcbiAgICAgIGNvbmZpZzogc2FsdGVBdXRoLmNvbmZpZyxcbiAgICAgIGxvZ2luOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbG9naW5IYW5kbGVyKCk7XG4gICAgICB9LFxuICAgICAgbG9naW5JblByb2dyZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNhbHRlQXV0aC5sb2dpbkluUHJvZ3Jlc3MoKTtcbiAgICAgIH0sXG4gICAgICBsb2dPdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzYWx0ZUF1dGgubG9nT3V0KCk7XG4gICAgICAgIC8vIGNhbGwgc2lnbm91dCByZWxhdGVkIG1ldGhvZFxuICAgICAgfSxcbiAgICAgIGdldENhY2hlZFRva2VuOiBmdW5jdGlvbihyZXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc2FsdGVBdXRoLmdldENhY2hlZFRva2VuKHJlc291cmNlKTtcbiAgICAgIH0sXG4gICAgICB1c2VySW5mbzogX29hdXRoRGF0YSxcbiAgICAgIGFjcXVpcmVUb2tlbjogZnVuY3Rpb24ocmVzb3VyY2UpIHtcbiAgICAgICAgLy8gYXV0b21hdGVkIHRva2VuIHJlcXVlc3QgY2FsbFxuICAgICAgICBsZXQgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICBzYWx0ZUF1dGguX3JlbmV3QWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgc2FsdGVBdXRoLmFjcXVpcmVUb2tlbihyZXNvdXJjZSwgZnVuY3Rpb24oZXJyb3IsIHRva2VuT3V0KSB7XG4gICAgICAgICAgc2FsdGVBdXRoLl9yZW5ld0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgc2FsdGVBdXRoLmVycm9yKCdFcnJvciB3aGVuIGFjcXVpcmluZyB0b2tlbiBmb3IgcmVzb3VyY2U6ICcgKyByZXNvdXJjZSwgZXJyb3IpO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0b2tlbk91dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH0sXG4gICAgICBnZXRVc2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgc2FsdGVBdXRoLmdldFVzZXIoZnVuY3Rpb24oZXJyb3IsIHVzZXIpIHtcbiAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHNhbHRlQXV0aC5lcnJvcignRXJyb3Igd2hlbiBnZXR0aW5nIHVzZXInLCBlcnJvcik7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHVzZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICB9LFxuICAgICAgZ2V0UmVzb3VyY2VGb3JFbmRwb2ludDogZnVuY3Rpb24oZW5kcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHNhbHRlQXV0aC5nZXRSZXNvdXJjZUZvckVuZHBvaW50KGVuZHBvaW50KTtcbiAgICAgIH0sXG4gICAgICBjbGVhckNhY2hlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc2FsdGVBdXRoLmNsZWFyQ2FjaGUoKTtcbiAgICAgIH0sXG4gICAgICBjbGVhckNhY2hlRm9yUmVzb3VyY2U6IGZ1bmN0aW9uKHJlc291cmNlKSB7XG4gICAgICAgIHNhbHRlQXV0aC5jbGVhckNhY2hlRm9yUmVzb3VyY2UocmVzb3VyY2UpO1xuICAgICAgfSxcbiAgICAgIGluZm86IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgc2FsdGVBdXRoLmluZm8obWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgdmVyYm9zZTogZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICBzYWx0ZUF1dGgudmVyYm9zZShtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBzYWx0ZUF1dGg6IHNhbHRlQXV0aFxuICAgIH07XG4gIH07XG4gIHRoaXMuJGdldC4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyR3aW5kb3cnLCAnJHEnLCAnJGxvY2F0aW9uJywgJyR0aW1lb3V0JywgJyRpbmplY3RvciddO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9zYWx0ZS1hdXRoLnByb3ZpZGVyLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTdEQTtBQStEQTtBQUNBO0FBQ0E7QUFDQTtBQTdVQTtBQUNBOzs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 2 */
/* unknown exports provided */
/* all exports used */
/*!**************************!*\
  !*** external "angular" ***!
  \**************************/
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_2__;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImFuZ3VsYXJcIj8xMWQyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8yX187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJhbmd1bGFyXCJcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 3 */
/* unknown exports provided */
/* all exports used */
/*!*****************************!*\
  !*** external "salte-auth" ***!
  \*****************************/
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_3__;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInNhbHRlLWF1dGhcIj82ODhjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8zX187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJzYWx0ZS1hdXRoXCJcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 4 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./salte-auth-angular.module.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = __webpack_require__(/*! angular */ 2);\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _protectedResourceInterceptorFactory = __webpack_require__(/*! ./protected-resource-interceptor.factory.js */ 0);\n\nvar _protectedResourceInterceptorFactory2 = _interopRequireDefault(_protectedResourceInterceptorFactory);\n\nvar _salteAuthProvider = __webpack_require__(/*! ./salte-auth.provider.js */ 1);\n\nvar _salteAuthProvider2 = _interopRequireDefault(_salteAuthProvider);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _angular2.default.module('salte.auth-angular', []);\n\n_module.factory('ProtectedResourceInterceptor', _protectedResourceInterceptorFactory2.default);\n_module.provider('salteAuthService', _salteAuthProvider2.default);\n\nexports.default = _module.name;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvc2FsdGUtYXV0aC1hbmd1bGFyLm1vZHVsZS5qcz82NGQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFByb3RlY3RlZFJlc291cmNlSW50ZXJjZXB0b3IgZnJvbSAnLi9wcm90ZWN0ZWQtcmVzb3VyY2UtaW50ZXJjZXB0b3IuZmFjdG9yeS5qcyc7XG5pbXBvcnQgc2FsdGVBdXRoU2VydmljZSBmcm9tICcuL3NhbHRlLWF1dGgucHJvdmlkZXIuanMnO1xuXG5jb25zdCBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnc2FsdGUuYXV0aC1hbmd1bGFyJywgW10pO1xuXG5tb2R1bGUuZmFjdG9yeSgnUHJvdGVjdGVkUmVzb3VyY2VJbnRlcmNlcHRvcicsIFByb3RlY3RlZFJlc291cmNlSW50ZXJjZXB0b3IpO1xubW9kdWxlLnByb3ZpZGVyKCdzYWx0ZUF1dGhTZXJ2aWNlJywgc2FsdGVBdXRoU2VydmljZSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vZHVsZS5uYW1lO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9zYWx0ZS1hdXRoLWFuZ3VsYXIubW9kdWxlLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ })
/******/ ]);
});
